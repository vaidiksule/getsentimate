# Generated by Django 4.2.23 on 2025-08-26 11:11

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('google_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('google_email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('profile_picture', models.URLField(blank=True, max_length=500, null=True)),
                ('youtube_access_token', models.TextField(blank=True, null=True)),
                ('youtube_refresh_token', models.TextField(blank=True, null=True)),
                ('token_expiry', models.DateTimeField(blank=True, null=True)),
                ('is_active_channel', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('custom_url', models.CharField(blank=True, max_length=100, null=True)),
                ('thumbnail_url', models.URLField(blank=True, max_length=500, null=True)),
                ('subscriber_count', models.IntegerField(default=0)),
                ('video_count', models.IntegerField(default=0)),
                ('view_count', models.BigIntegerField(default=0)),
                ('country', models.CharField(blank=True, max_length=10, null=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('is_connected', models.BooleanField(default=True)),
                ('last_sync', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='channels', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'channels',
                'unique_together': {('id', 'user')},
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('thumbnail_url', models.URLField(blank=True, max_length=500, null=True)),
                ('published_at', models.DateTimeField()),
                ('duration', models.CharField(blank=True, max_length=20, null=True)),
                ('view_count', models.BigIntegerField(default=0)),
                ('like_count', models.IntegerField(default=0)),
                ('comment_count', models.IntegerField(default=0)),
                ('category_id', models.CharField(blank=True, max_length=20, null=True)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('language', models.CharField(blank=True, max_length=10, null=True)),
                ('comments_fetched', models.BooleanField(default=False)),
                ('comments_analyzed', models.BooleanField(default=False)),
                ('last_comment_fetch', models.DateTimeField(blank=True, null=True)),
                ('last_analysis', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='youtube_analytics.channel')),
            ],
            options={
                'db_table': 'videos',
                'ordering': ['-published_at'],
            },
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_channel', models.CharField(blank=True, max_length=100, null=True)),
                ('videos_per_page', models.IntegerField(default=10)),
                ('auto_refresh_enabled', models.BooleanField(default=True)),
                ('refresh_interval', models.IntegerField(default=300)),
                ('default_analysis_type', models.CharField(default='sentiment', max_length=50)),
                ('include_toxicity_analysis', models.BooleanField(default=True)),
                ('save_analysis_history', models.BooleanField(default=True)),
                ('email_notifications', models.BooleanField(default=False)),
                ('analysis_complete_notifications', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_preferences',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('author_name', models.CharField(max_length=200)),
                ('author_channel_id', models.CharField(blank=True, max_length=100, null=True)),
                ('author_profile_picture', models.URLField(blank=True, max_length=500, null=True)),
                ('text', models.TextField()),
                ('like_count', models.IntegerField(default=0)),
                ('published_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('sentiment_score', models.FloatField(blank=True, null=True)),
                ('sentiment_label', models.CharField(blank=True, max_length=20, null=True)),
                ('toxicity_score', models.FloatField(blank=True, null=True)),
                ('toxicity_label', models.CharField(blank=True, max_length=20, null=True)),
                ('is_analyzed', models.BooleanField(default=False)),
                ('analysis_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='youtube_analytics.video')),
            ],
            options={
                'db_table': 'comments',
                'ordering': ['-published_at'],
            },
        ),
        migrations.CreateModel(
            name='AnalysisResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('total_comments', models.IntegerField(default=0)),
                ('analyzed_comments', models.IntegerField(default=0)),
                ('positive_sentiment_ratio', models.FloatField(default=0.0)),
                ('negative_sentiment_ratio', models.FloatField(default=0.0)),
                ('neutral_sentiment_ratio', models.FloatField(default=0.0)),
                ('average_toxicity_score', models.FloatField(default=0.0)),
                ('top_commenters', models.JSONField(blank=True, default=list)),
                ('engagement_score', models.FloatField(default=0.0)),
                ('comment_quality_score', models.FloatField(default=0.0)),
                ('audience_insights', models.TextField(blank=True, null=True)),
                ('content_recommendations', models.TextField(blank=True, null=True)),
                ('engagement_trends', models.TextField(blank=True, null=True)),
                ('analysis_date', models.DateTimeField(auto_now_add=True)),
                ('processing_time', models.FloatField(default=0.0)),
                ('ai_model_used', models.CharField(default='gemini-1.5-pro', max_length=50)),
                ('video', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analysis', to='youtube_analytics.video')),
            ],
            options={
                'db_table': 'analysis_results',
            },
        ),
    ]
